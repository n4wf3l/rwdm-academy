const express = require("express");
const router = express.Router();
const nodemailer = require("nodemailer");
const { format } = require("date-fns");
const { fr } = require("date-fns/locale");

function getLabelFromType(type) {
  switch (type) {
    case "registration":
      return "Inscription √† l'acad√©mie";
    case "selection-tests":
      return "Tests de s√©lection";
    case "accident-report":
      return "D√©claration d'accident";
    case "responsibility-waiver":
      return "D√©charge de responsabilit√©";
    case "other":
      return "Rendez-vous g√©n√©ral";
    default:
      return "Rendez-vous";
  }
}

router.post("/send-registration-email", async (req, res) => {
  const { formData, requestId } = req.body;

  if (
    !formData ||
    !formData.parent1Email ||
    !formData.firstName ||
    !formData.lastName
  ) {
    return res.status(400).json({ error: "Donn√©es manquantes." });
  }

  try {
    const transporter = nodemailer.createTransport({
      host: "smtp-auth.mailprotect.be",
      port: 587,
      secure: false,
      auth: {
        user: "info@nainnovations.be",
        pass: "mdp123",
      },
    });

    const html = `
  <p>Bonjour ${formData.parent1FirstName ?? ""},</p>

  <p>Nous vous confirmons que nous avons bien re√ßu la demande d'inscription de votre enfant <strong>${
    formData.firstName
  } ${formData.lastName}</strong> √† la ${formData.academy} pour la saison ${
      formData.season
    }.</p>

  <p>Notre √©quipe administrative √©tudiera votre dossier dans les plus brefs d√©lais. En cas d'acceptation, vous serez contact√© pour fixer un rendez-vous au secr√©tariat ou pour une s√©ance de test de s√©lection.</p>

  <p>üì¢ Restez attentif √† vos emails ‚Äî une r√©ponse vous sera envoy√©e prochainement.</p>
      <br/>
        <p><strong>Num√©ro de r√©f√©rence de la demande :</strong> ${requestId}</p>
              <br/>
  <br/>
  <p>Cordialement,</p>
  <p><strong>RWDM Academy</strong><br/>Service des inscriptions</p>
`;

    await transporter.sendMail({
      from: '"RWDM Academy" <info@nainnovations.be>',
      to: formData.parent1Email,
      subject: `Demande d'inscription re√ßue ‚Äì RWDM Academy (ref #${requestId})`,
      html,
    });

    res.json({ message: "Email de confirmation envoy√© avec succ√®s." });
  } catch (err) {
    console.error("‚ùå Erreur d'envoi :", err);
    res.status(500).json({ error: "Erreur lors de l‚Äôenvoi de l‚Äôemail." });
  }
});

router.post("/send-selection-test-email", async (req, res) => {
  const { formData, requestId } = req.body;

  if (
    !formData ||
    !formData.parentEmail ||
    !formData.firstName ||
    !formData.lastName
  ) {
    return res.status(400).json({ error: "Donn√©es manquantes." });
  }

  try {
    const transporter = nodemailer.createTransport({
      host: "smtp-auth.mailprotect.be",
      port: 587,
      secure: false,
      auth: {
        user: "info@nainnovations.be",
        pass: "mdp123",
      },
    });

    const html = `
    <p>Bonjour ${formData.parentFirstName ?? ""},</p>
  
    <p>Nous vous confirmons que nous avons bien re√ßu la demande de test de s√©lection de <strong>${
      formData.firstName
    } ${formData.lastName}</strong> pour le noyau <strong>${
      formData.noyau
    }</strong>.</p>
  
    <p>üì¢ Cette demande sera √©tudi√©e par notre staff technique.</p>
  
    <p>En cas d'acceptation, un membre du staff vous contactera par email afin de vous inviter √† une s√©ance de test √† une date et une heure pr√©cises.</p>
  
    <p>üïí Nous vous recommandons de rester attentif √† vos emails pour ne manquer aucune information importante li√©e √† cette candidature.</p>
  
    <p><strong>Num√©ro de r√©f√©rence de la demande :</strong> ${requestId}</p>
  
    <br/>
    <p>Cordialement,</p>
    <p><strong>RWDM Academy</strong><br/>Cellule d√©tection</p>
  `;

    await transporter.sendMail({
      from: '"RWDM Academy" <info@nainnovations.be>',
      to: formData.parentEmail,
      subject: `Demande de test re√ßue ‚Äì RWDM Academy (ref #${requestId})`,
      html,
    });

    res.json({ message: "Email de confirmation (test) envoy√© avec succ√®s." });
  } catch (err) {
    console.error("‚ùå Erreur d'envoi test :", err);
    res.status(500).json({ error: "Erreur lors de l‚Äôenvoi de l‚Äôemail." });
  }
});

router.post("/send-accident-report-email", async (req, res) => {
  const { formData, requestId } = req.body;

  if (
    !formData ||
    !formData.email ||
    !formData.playerFirstName ||
    !formData.playerLastName
  ) {
    return res.status(400).json({ error: "Donn√©es manquantes." });
  }

  try {
    const transporter = nodemailer.createTransport({
      host: "smtp-auth.mailprotect.be",
      port: 587,
      secure: false,
      auth: {
        user: "info@nainnovations.be",
        pass: "mdp123",
      },
    });

    const isDeclaration = formData.documentLabel === "D√©claration d'accident";

    const html = isDeclaration
      ? `
          <p>Bonjour,</p>
  
          <p>Nous vous confirmons que nous avons bien re√ßu la <strong>d√©claration d'accident</strong> concernant le joueur 
          <strong>${formData.playerFirstName} ${formData.playerLastName}</strong>.</p>
  
          <p>
            <strong style="color:#c53030; font-size: 18px;">IMPORTANT :</strong><br/>
            Conservez pr√©cieusement le code ci-dessous. Il vous sera demand√© plus tard pour t√©l√©verser le <strong>certificat de gu√©rison</strong>.
          </p>
  
          <div style="margin: 20px 0; padding: 15px; background-color: #f9f9f9; border: 2px dashed #c53030; text-align: center;">
            <p style="font-size: 22px; font-weight: bold; color: #c53030; letter-spacing: 2px;">
              ${formData.codeDossier}
            </p>
          </div>
  
          <p>
            Sans ce code, vous ne pourrez pas finaliser la proc√©dure de remboursement aupr√®s de l‚ÄôUnion belge.<br/>
            Gardez-le en lieu s√ªr ou imprimez ce mail si besoin.
          </p>
  
          <p><strong>Num√©ro de r√©f√©rence de la d√©claration :</strong> ${requestId}</p>
  
          <br/>
          <p>Cordialement,</p>
          <p><strong>RWDM Academy</strong><br/>Cellule m√©dicale</p>
        `
      : `
          <p>Bonjour,</p>
  
          <p>Merci pour l‚Äôenvoi du <strong>certificat de gu√©rison</strong> concernant le joueur 
          <strong>${formData.playerFirstName} ${formData.playerLastName}</strong>.</p>
  
          <p>
            ü©∫ Votre document a bien √©t√© re√ßu par le club. Il sera prochainement v√©rifi√© par notre cellule m√©dicale.</p>

             <p>
            Vous recevrez une confirmation ou des instructions suppl√©mentaires par email d√®s que le traitement aura √©t√© effectu√©.
          </p>
  
          <br/>
          <p>Cordialement,</p>
          <p><strong>RWDM Academy</strong><br/>Cellule m√©dicale</p>
        `;

    const subject = isDeclaration
      ? `D√©claration d'accident re√ßue ‚Äì RWDM Academy (ref #${requestId})`
      : `Certificat de gu√©rison re√ßu ‚Äì RWDM Academy (ref #${requestId})`;

    await transporter.sendMail({
      from: '"RWDM Academy" <info@nainnovations.be>',
      to: formData.email,
      subject,
      html,
    });

    res.json({ message: "Email de confirmation envoy√© avec succ√®s." });
  } catch (err) {
    console.error("‚ùå Erreur d'envoi :", err);
    res.status(500).json({ error: "Erreur lors de l‚Äôenvoi de l‚Äôemail." });
  }
});

router.post("/send-waiver-email", async (req, res) => {
  const { formData, requestId } = req.body;

  if (
    !formData ||
    !formData.parentEmail ||
    !formData.parentFirstName ||
    !formData.parentLastName ||
    !formData.playerFirstName ||
    !formData.playerLastName
  ) {
    return res.status(400).json({ error: "Donn√©es manquantes." });
  }

  try {
    const transporter = nodemailer.createTransport({
      host: "smtp-auth.mailprotect.be",
      port: 587,
      secure: false,
      auth: {
        user: "info@nainnovations.be",
        pass: "mdp123",
      },
    });

    const html = `
        <p>Bonjour ${formData.parentFirstName},</p>
  
        <p>Nous vous confirmons que la <strong>d√©charge de responsabilit√©</strong> pour le joueur
        <strong>${formData.playerFirstName} ${formData.playerLastName}</strong> a bien √©t√© re√ßue.</p>
  
        <p>
          üìù Elle sera analys√©e et valid√©e prochainement par notre cellule administrative.<br/>
          Vous serez tenu(e) inform√©(e) par email une fois la proc√©dure finalis√©e.
        </p>
  
        <p><strong>Num√©ro de r√©f√©rence :</strong> ${requestId}</p>
  
        <br/>
        <p>Cordialement,</p>
        <p><strong>RWDM Academy</strong><br/>Administration</p>
      `;

    await transporter.sendMail({
      from: '"RWDM Academy" <info@nainnovations.be>',
      to: formData.parentEmail,
      subject: `D√©charge de responsabilit√© re√ßue ‚Äì RWDM Academy (ref #${requestId})`,
      html,
    });

    res.json({ message: "Email de confirmation envoy√© avec succ√®s." });
  } catch (err) {
    console.error("‚ùå Erreur d'envoi :", err);
    res.status(500).json({ error: "Erreur lors de l‚Äôenvoi de l‚Äôemail." });
  }
});

router.post("/send-contact-message", async (req, res) => {
  const { name, email, subject, message } = req.body;

  if (!name || !email || !subject || !message) {
    return res.status(400).json({ error: "Tous les champs sont requis." });
  }

  try {
    const transporter = nodemailer.createTransport({
      host: "smtp-auth.mailprotect.be",
      port: 587,
      secure: false,
      auth: {
        user: "info@nainnovations.be",
        pass: "mdp123",
      },
    });

    const html = `
        <h2>üì¨ Nouveau message re√ßu depuis le formulaire de contact</h2>
        <p><strong>Nom :</strong> ${name}</p>
        <p><strong>Email :</strong> ${email}</p>
        <p><strong>Sujet :</strong> ${subject}</p>
        <p><strong>Message :</strong><br/>${message.replace(/\n/g, "<br/>")}</p>
      `;

    await transporter.sendMail({
      from: '"RWDM Academy ‚Äì Contact" <info@nainnovations.be>', // ‚úÖ SPF OK
      to: "info@nainnovations.be",
      replyTo: email, // ‚úÖ pour r√©pondre au visiteur
      subject: `üì¨ Nouveau message via formulaire de contact : ${subject}`,
      html,
    });

    res.json({ message: "Message envoy√© avec succ√®s." });
  } catch (err) {
    console.error("‚ùå Erreur lors de l'envoi du message :", err);
    res.status(500).json({ error: "Erreur lors de l'envoi du message." });
  }
});

router.post("/send-decision-email", async (req, res) => {
  const { formData, requestId, decision, requestType } = req.body;

  if (!formData || !requestId || !decision || !requestType)
    return res.status(400).json({ error: "Donn√©es manquantes." });

  /* ‚îÄ‚îÄ 1.  Petit helper pour traduire le type ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  const typeLabels = {
    registration: "inscription √† l'acad√©mie",
    "selection-tests": "test de s√©lection",
    "accident-report": "d√©claration d'accident",
    "responsibility-waiver": "d√©charge de responsabilit√©",
  };
  const typeLabel = typeLabels[requestType] ?? "votre demande";

  /* ‚îÄ‚îÄ 2.  Transporter nodemailer identique ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  const transporter = nodemailer.createTransport({
    host: "smtp-auth.mailprotect.be",
    port: 587,
    secure: false,
    auth: { user: "info@nainnovations.be", pass: "mdp123" },
  });

  /* ‚îÄ‚îÄ 3.  Objet & contenu dynamiques ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  const accepted = decision === "accepted";
  const subject = accepted
    ? `Votre demande est accept√©e ‚Äì RWDM Academy (ref #${requestId})`
    : `Votre demande est refus√©e ‚Äì RWDM Academy (ref #${requestId})`;

  const html = accepted
    ? `
          <p>Bonjour ${
            formData.parentFirstName ?? formData.firstName ?? "Madame, Monsieur"
          },</p>
          <p>‚úÖ Bonne nouvelle¬†! Votre <strong>${typeLabel}</strong> (r√©f¬†${requestId}) a √©t√© <strong>accept√©e</strong> par la direction de la RWDM Academy.</p>
          <p>Nous reviendrons rapidement vers vous pour la suite.</p>
          <p>Cordialement,<br/>RWDM¬†Academy</p>
        `
    : `
          <p>Bonjour ${
            formData.parentFirstName ?? formData.firstName ?? "Madame, Monsieur"
          },</p>
          <p>Nous sommes au regret de vous informer que <strong>${typeLabel}</strong> (r√©f¬†${requestId}) a √©t√© <strong>refus√©e</strong> par la direction de la RWDM Academy.</p>
          <p>Cordialement,<br/>RWDM¬†Academy</p>
        `;

  /* ‚îÄ‚îÄ 4.  Envoi ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  await transporter.sendMail({
    from: '"RWDM Academy" <info@nainnovations.be>',
    to: formData.email || formData.parent1Email || formData.parentEmail,
    subject,
    html,
  });

  res.json({ message: "Email de d√©cision envoy√© avec succ√®s." });
});

router.post("/send-appointment-confirmation", async (req, res) => {
  const { appointment } = req.body;

  // S√©curit√© minimale
  if (!appointment || !appointment.email) {
    return res.status(400).json({ error: "Donn√©es manquantes." });
  }

  try {
    const transporter = nodemailer.createTransport({
      host: "smtp-auth.mailprotect.be",
      port: 587,
      secure: false,
      auth: {
        user: "info@nainnovations.be",
        pass: "mdp123",
      },
    });

    // On formate un petit r√©sum√©
    const { date, time, type, personName, adminName } = appointment;

    const html = `
    <p>Bonjour ${personName ?? "Madame, Monsieur"},</p>
  
    <p>
      Nous avons le plaisir de vous confirmer la planification de votre rendez-vous avec l'√©quipe RWDM Academy.
    </p>
  
    <p><strong>D√©tails du rendez-vous :</strong></p>
  
    <table style="margin: 16px 0; border-collapse: collapse; font-size: 15px;">
      <tr>
        <td style="padding: 4px 8px;"><strong>Date :</strong></td>
        <td style="padding: 4px 8px;">${format(new Date(date), "dd MMMM yyyy", {
          locale: fr,
        })}</td>
      </tr>
      <tr>
        <td style="padding: 4px 8px;"><strong>Heure :</strong></td>
        <td style="padding: 4px 8px;">${time}</td>
      </tr>
      <tr>
        <td style="padding: 4px 8px;"><strong>Type de rendez-vous :</strong></td>
        <td style="padding: 4px 8px;">${getLabelFromType(type)}</td>
      </tr>
      ${
        adminName
          ? `<tr>
              <td style="padding: 4px 8px;"><strong>Administrateur r√©f√©rent :</strong></td>
              <td style="padding: 4px 8px;">${adminName}</td>
            </tr>`
          : ""
      }
      <tr>
        <td style="padding: 4px 8px;"><strong>Lieu :</strong></td>
        <td style="padding: 4px 8px;">
          Avenue Charles Malis 61<br/>
          1080 Molenbeek-Saint-Jean<br/>
          <em>Direction de l'acad√©mie du club</em>
        </td>
      </tr>
    </table>
  
    <p>
      Nous vous remercions de vous pr√©senter √† l'heure convenue. En cas d'indisponibilit√©, merci de nous contacter d√®s que possible afin de convenir d'un autre cr√©neau.
    </p>
  
    <p>Bien cordialement,</p>
  
    <p>
      <strong>RWDM Academy</strong><br/>
      Cellule administrative
    </p>
  `;

    await transporter.sendMail({
      from: '"RWDM Academy" <info@nainnovations.be>',
      to: appointment.email,
      subject: "Confirmation de rendez‚Äëvous ‚Äì RWDM Academy",
      html,
    });

    res.json({ message: "Email de confirmation envoy√© avec succ√®s." });
  } catch (err) {
    console.error("‚ùå Erreur envoi rendez‚Äëvous :", err);
    res.status(500).json({ error: "Erreur lors de l‚Äôenvoi de l‚Äôemail." });
  }
});

router.post("/send-appointment-cancellation", async (req, res) => {
  const { appointment } = req.body;

  if (
    !appointment ||
    !appointment.email ||
    !appointment.date ||
    !appointment.time
  ) {
    return res.status(400).json({ error: "Donn√©es manquantes." });
  }

  try {
    const transporter = nodemailer.createTransport({
      host: "smtp-auth.mailprotect.be",
      port: 587,
      secure: false,
      auth: {
        user: "info@nainnovations.be",
        pass: "mdp123",
      },
    });

    // ‚úÖ formatage date + heure
    const { format } = require("date-fns");
    const { fr } = require("date-fns/locale");
    const formattedDate = format(new Date(appointment.date), "dd/MM/yyyy", {
      locale: fr,
    });
    const formattedTime = appointment.time;

    const html = `
        <p>Bonjour ${appointment.personName},</p>
        <p>Nous vous informons que votre rendez-vous pr√©vu le <strong>${formattedDate}</strong> √† <strong>${formattedTime}</strong> a √©t√© <strong>annul√©</strong>.</p>
        <p>Pour toute question, n'h√©sitez pas √† nous contacter.</p>
        <br/>
        <p>Cordialement,<br/>RWDM Academy</p>
      `;

    await transporter.sendMail({
      from: '"RWDM Academy" <info@nainnovations.be>',
      to: appointment.email,
      subject: `Rendez-vous annul√© ‚Äì RWDM Academy`,
      html,
    });

    res.json({ message: "Email d‚Äôannulation envoy√© avec succ√®s." });
  } catch (err) {
    console.error("‚ùå Erreur envoi email rendez-vous :", err);
    res.status(500).json({ error: "Erreur lors de l‚Äôenvoi de l‚Äôemail." });
  }
});

module.exports = router;
